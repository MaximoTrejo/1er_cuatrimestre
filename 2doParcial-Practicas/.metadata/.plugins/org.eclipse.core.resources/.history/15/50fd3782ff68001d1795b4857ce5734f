#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "LinkedList.h"
#include "Controller.h"
#include "parser.h"
#include "participantes.h"

/** \brief Parsea los datos de los jugadores desde el archivo jugadores.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListJugador LinkedList*
 * \return int
 */
int parser_FromText(FILE* pFile , LinkedList* pArrayList)
{
	int retorno=-1;
	/*
	 * creo las variables auxiliares
	 * valido los parametros de la funcion
	 * leo el encabezado
	 * recorro todo el archivo hasta el final
	 * me fijo la cantidad de datos que lee
	 * valido que haya leido bien los datos
	 * *si los lee mal libero la memoria
	 * *si los lee bien cargo los datos por parametros
	 * valido que los haya cargado bien
	 * los guardo en la lista dinamica
	 */


	typedef struct
	{
		int id;
		char nombre[100];
		char categoria[30];
		int tiempo;
		float promedio;

	}eParticipantes;


	char auxId[TAM];
	char auxNombre[TAM];
	char auxCatergoria[TAM];
	char auxTiempo[TAM];
	char auxPromedio[TAM];

	int cantidad;//variable para guardar la cantidad de datos
	eParticipantes * participantes;//puntero a estructura jugador en donde se guarda los datos

	if(pFile != NULL && pArrayList != NULL){
		fscanf(pFile,"%[^,],%[^,],%[^,],%[^,],%[^\n] \n",auxId,auxNombre,auxCatergoria,auxTiempo,auxPromedio);//falsa lectura
		while(feof(pFile)==0){
			cantidad=fscanf(pFile,"%[^,],%[^,],%[^,],%[^,],%[^\n] \n",auxId,auxNombre,auxCatergoria,auxTiempo,auxPromedio);
			if(cantidad ==6){
				participantes= list_newParametros(auxId, auxNombre, auxCatergoria, auxTiempo, auxPromedio);
				if(participantes!=NULL){
					ll_add(pArrayList, participantes);
					retorno=1;
				}
			}else{
				jug_delete(jugadores);
				retorno=0;
			}
		}
	}


    return retorno;
}

/** \brief Parsea los datos de los jugadores desde el archivo binario.
 *
 * \param path char*
 * \param pArrayListJugador LinkedList*
 * \return int
 *
 */
int parser_JugadorFromBinary(FILE* pFile , LinkedList* pArrayListJugador)
{
	int retorno=-1;
	/*
	 * varido los parametros de la funcion
	 * recorro todo el archivo hasta el final
	 * creo nuevo espacio en la memoria
	 * valido el espacio de memoria
	 * valido que se lea todo el archivo
	 * lo guardo en la lista dinamica
	 * sino informo el error y salgo del bucle
	 */
	eJugador* jugadores;

	if(pFile != NULL && pArrayListJugador != NULL){

		do{
			jugadores=jug_new();

			if(jugadores != NULL){

				//(informacion que va a escribir) , (tamanio del dato que estoy escribiendo) , (cantidad de elementos), (donde lo va a escribir ).
				if(fread(jugadores,sizeof(eJugador),1,pFile)==1){
					ll_add(pArrayListJugador, jugadores);
					retorno=1;
				}else{
					printf("Ocurrio un error(no leyo todo los datos)\n");
					retorno=0;
					break;
				}
			}
		}while(feof(pFile));

	}
    return retorno;
}


/** \brief Parsea los datos de los selecciones desde el archivo selecciones.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListSeleccion LinkedList*
 * \return int
 *
 */
int parser_SeleccionFromText(FILE* pFile , LinkedList* pArrayListSeleccion)
{
	int retorno=-1;
		/*
		 * creo las variables auxiliares
		 * valido los parametros de la funcion
		 * leo el encabezado
		 * recorro todo el archivo hasta el final
		 * me fijo la cantidad de datos que lee
		 * valido que haya leido bien los datos
		 * *si los lee mal libero la memoria
		 * *si los lee bien cargo los datos por parametros
		 * valido que los haya cargado bien
		 * los guardo en la lista dinamica
		 */

	char auxId[TAM];
	char auxPais[TAM];
	char auxConfederacion[TAM];
	char auxConvocados[TAM];

	int cantidad;
	eSeleccion *seleccion;

	if(pFile != NULL && pArrayListSeleccion != NULL){
		fscanf(pFile,"%[^,],%[^,],%[^,],%[^\n]\n",auxId,auxPais,auxConfederacion,auxConvocados);
		while(feof(pFile)==0){
			cantidad=fscanf(pFile,"%[^,],%[^,],%[^,],%[^\n]\n",auxId,auxPais,auxConfederacion,auxConvocados);
			if(cantidad==4){
				//printf("%d\n",cantidad);
				seleccion=selec_newParametros(auxId, auxPais, auxConfederacion, auxConvocados);
				if(seleccion!=NULL){
					//printf("entro bien\n");
					ll_add(pArrayListSeleccion,seleccion);
					retorno=1;
				}
			}else{
				//printf("entro mal\n ");
				selec_delete(seleccion);
				retorno=0;
			}
		}
	}
    return retorno;
}








int parser_idFantasma(void){
	char maxIdAux[10];
	int newMaxId;

	/*
	 * 1-abro el archivo en modo lectura
	 * 2-verifico
	 * 3-leo lo que hay en el archivo
	 * 4-convierto a entero a lo que hay dentro del archivo y le sumo 1
	 * 5-cierro el archivo
	 * -----------------------
	 * 6-hablo el archivo en modo escritura y escribo el nuevo id para guardarlo
	 * 7-cierro el archivo
	 * 8-retorno el nuevo id
	 */

	FILE* pArchivo;

	pArchivo=fopen("idFantasma.txt","r");

	if(pArchivo!=NULL){
		fscanf(pArchivo,"%[^\n]", maxIdAux);
		newMaxId=atoi(maxIdAux);
		newMaxId++;
	}
	fclose(pArchivo);

	pArchivo=fopen("idFantasma.txt","w");
	fprintf(pArchivo,"%d\n",newMaxId);
	fclose(pArchivo);

	return (newMaxId);
}
